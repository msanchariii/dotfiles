---
- name: play
  hosts: localhost
  tasks:

# Clone the configs repo
    - name: Clone the .dotfiles repository into a hidden directory
      git:
        repo: 'https://github.com/suyashbhawsar/.dotfiles.git'
        dest: '{{ ansible_env.HOME }}/.dotfiles'
        update: yes
      tags:
        - mac-minimal
        - mac-full
        - linux
    - name: Show the home directory
      debug:
        msg: "The home directory is {{ ansible_env.HOME }}"
      tags:
        - linux
## GNU Stow
    - name: "MacOS | Install GNU Stow"
      homebrew:
        name: stow
        state: present
      tags:
        - mac-minimal
        - mac-full
  
    - name: "Debian | Install GNU Stow"
      apt:
        name: stow
        state: present
      become: true
      tags:
        - linux

    # - name: Run stow
    #   shell: "stow . --target {{ ansible_env.HOME }} --verbose=2"
    #   args:
    #     chdir: '{{ ansible_env.HOME }}/.dotfiles'
    #   register: result
    #   changed_when: 'result.stderr is search("LINK: ")'
    #   tags:
    #     - linux

    # - name: Unstow everything
    #   shell: "stow -D . --target {{ ansible_env.HOME }} --verbose=2"
    #   args:
    #     chdir: '{{ ansible_env.HOME }}/.dotfiles'
    #   register: result
    #   changed_when: 'result.stderr is search("UNLINK: ")'
    #   tags:
    #     - linux
  
## 1Password
    - name: "MacOS | Install 1Password and 1Password CLI"
      homebrew:
        name: "{{ item }}"
        state: present
      with_items:
        - 1password
        - 1password-cli
      tags:
        - mac-full


## kitty
    - name: "MacOS | Install Kitty emulator"
      homebrew:
        name: kitty
        state: present
      tags:
        - mac-full


## neovim
    - name: "MacOS | Install Neovim & its Dependencies"
      homebrew:
        name: "{{ item }}"
        state: present
      with_items:
        - libtool
        - ansible-lint
        - ripgrep
        - lua
        - luarocks
        - luajit
        - neovim
      tags:
        - mac-minimal
        - mac-full

    - name: "Debian | Install Neovim & its Dependencies"
      ansible.builtin.apt:
        name:
          - cmake
          - curl
          - pkg-config
          - libtool
          - unzip
          - ansible-lint
          - ripgrep
          - lua5.1
          - luarocks
          - luajit
          - neovim
        state: present
      become: true
      tags:
        - linux

    - name: "Neovim | Config folder"
      ansible.builtin.file:
        mode: "0755"
        path: "{{ ansible_user_dir }}/.config/nvim"
        state: directory
      tags:
        - mac-minimal
        - mac-full
        - linux


## tmux
    - name: "MacOS | Install tmux"
      homebrew:
        name: tmux
        state: present
      tags:
        - mac-minimal
        - mac-full

    - name: "Debian | Install tmux"
      ansible.builtin.apt:
        name: tmux
        state: present
      become: true
      tags:
        - linux

    # - name: "Tmux | Configure tmux using Stow"
    #   ansible.builtin.command:
    #     cmd: "stow -d {{ ansible_user_dir }}/.dotfiles -t {{ ansible_env.HOME }} tmux"
    #   tags:
    #     - mac-minimal
    #     - mac-full
    #     - linux

#    - name: "Tmux | Configure tmux"
#      ansible.builtin.copy:
#        src: "{{ ansible_user_dir }}/.dotfiles/tmux/tmux.conf"
#        dest: "{{ ansible_user_dir }}/.config/"
#        mode: "0644"
#        directory_mode: "0755"
#        force: true
#      tags:
#        - mac-minimal
#        - mac-full
#        - linux

## zsh
    - name: "MacOS | Install ZSH"
      homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - zsh
      tags:
        - mac-minimal
        - mac-full

    - name: "Debian | Install Zsh"
      apt:
        name: zsh
        state: present
      become: true
      tags:
        - linux

    # - name: "Zsh | Configure .zshrc using Stow"
    #   ansible.builtin.command:
    #     cmd: "stow -d {{ ansible_user_dir }}/.dotfiles -t {{ ansible_user_dir }} zsh"
    #   tags:
    #     - mac-minimal
    #     - mac-full
    #     - linux

#    - name: "Zsh | Configure .zshrc"
#      ansible.builtin.copy:
#        src: "{{ ansible_user_dir }}/.dotfiles/zsh/.zshrc"
#        dest: "{{ ansible_user_dir }}/"
#        force: true
#      tags:
#        - mac-minimal
#        - mac-full
#        - linux

    - name: "Zsh | Detect oh-my-zsh"
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/.oh-my-zsh"
      register: ohmyzsh
      tags:
        - mac-minimal
        - mac-full
        - linux

    - name: "Zsh | Install oh-my-zsh if not installed"
      when: not ohmyzsh.stat.exists
      tags:
        - mac-minimal
        - mac-full
        - linux
      block:
        - name: "Zsh | Download oh-my-zsh Install Script"
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
            dest: "{{ ansible_user_dir }}/oh-my-zsh.install.sh"
            mode: "0755"

        - name: "Zsh | Run oh-my-zsh Install Script"
          ansible.builtin.command:
            cmd: "sh {{ ansible_user_dir }}/oh-my-zsh.install.sh"

        - name: "Zsh | Cleanup Oh My Zsh Install Script"
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/oh-my-zsh.install.sh"
            state: absent

    - name: Clone zsh-syntax-highlighting repository
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "{{ ansible_user_dir }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
        depth: 1
      tags:
        - mac-minimal
        - mac-full
        - linux

    - name: Add zsh-syntax-highlighting to .zshrc
      ansible.builtin.lineinfile:
        dest: "{{ ansible_user_dir }}/.zshrc"
        line: "source {{ ansible_user_dir }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
      tags:
        - mac-minimal
        - mac-full
        - linux

    - name: Clone zsh-autosuggestions repository
      ansible.builtin.git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: "{{ ansible_user_dir }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        depth: 1
      tags:
        - mac-minimal
        - mac-full
        - linux

    - name: Add zsh-autosuggestions to .zshrc
      ansible.builtin.lineinfile:
        dest: "{{ ansible_user_dir }}/.zshrc"
        line: "source {{ ansible_user_dir }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
      tags:
        - mac-minimal
        - mac-full
        - linux

    - name: "Zsh | Update .zshrc for all users"
      ansible.builtin.copy:
        src: .zshrc
        dest: "~/.zshrc"
        mode: "0644"
      tags:
        - mac-minimal
        - mac-full
        - linux
